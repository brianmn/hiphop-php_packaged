#
#   +----------------------------------------------------------------------+
#   | HipHop for PHP                                                       |
#   +----------------------------------------------------------------------+
#   | Copyright (c) 2010 Facebook, Inc. (http://www.facebook.com)          |
#   | Copyright (c) 1997-2010 The PHP Group                                |
#   +----------------------------------------------------------------------+
#   | This source file is subject to version 3.01 of the PHP license,      |
#   | that is bundled with this package in the file LICENSE, and is        |
#   | available through the world-wide-web at the following url:           |
#   | http://www.php.net/license/3_01.txt                                  |
#   | If you did not receive a copy of the PHP license and are unable to   |
#   | obtain it through the world-wide-web, please send a note to          |
#   | license@php.net so we can mail you a copy immediately.               |
#   +----------------------------------------------------------------------+
#

CMAKE_MINIMUM_REQUIRED(VERSION 2.6.4 FATAL_ERROR)
PROJECT(hphp C CXX)

IF("$ENV{HPHP_HOME}" STREQUAL "")
    IF(EXISTS "/usr/share/hphp/" AND EXISTS "/usr/bin/hphp")
        FILE(TO_CMAKE_PATH "/usr/share/hphp" HPHP_HOME)
    ELSE(EXISTS "/usr/share/hphp/" AND EXISTS "/usr/bin/hphp")
	IF(EXISTS "/usr/local/share/hphp/" AND EXISTS "/usr/local/bin/hphp")
            FILE(TO_CMAKE_PATH "/usr/local/share/hphp" HPHP_HOME)
        ELSE(EXISTS "/usr/local/share/hphp/" AND EXISTS "/usr/local/bin/hphp")
		message(FATAL_ERROR "Can't find hphp and the HPHP_HOME environmental is not set")
	ENDIF(EXISTS "/usr/local/share/hphp" AND EXISTS "/usr/local/bin/hphp")
    ENDIF(EXISTS "/usr/share/hphp/" AND EXISTS "/usr/bin/hphp")
ELSE("$ENV{HPHP_HOME}" STREQUAL "")
    FILE(TO_CMAKE_PATH "$ENV{HPHP_HOME}" HPHP_HOME)
ENDIF("$ENV{HPHP_HOME}" STREQUAL "")

IF(NOT IS_DIRECTORY ${HPHP_HOME})
	message(FATAL_ERROR "The value of HPHP_HOME does not exist")
ENDIF()

SET(CMAKE_MODULE_PATH "${HPHP_HOME}/CMake" ${CMAKE_MODULE_PATH})

include_directories(${CMAKE_CURRENT_SOURCE_DIR})

include(HPHPFunctions)
include(CheckFunctionExists)
include(HPHPSetup)

if ("${PROGRAM_NAME}" STREQUAL "")
	set(PROGRAM_NAME program)
endif()

auto_sources(SOURCES "*.cpp" "RECURSE" "${CMAKE_CURRENT_SOURCE_DIR}")

add_executable(${PROGRAM_NAME} ${SOURCES})

foreach (SOURCE_FILE ${SOURCES})
	if(${SOURCE_FILE} MATCHES ".no.cpp$")
		SET_SOURCE_FILES_PROPERTIES(
			${SOURCE_FILE}
			PROPERTIES
			COMPILE_FLAGS -O0
		)
	endif()
endforeach()

add_library(libhphp_runtime STATIC IMPORTED)
SET_PROPERTY(TARGET libhphp_runtime PROPERTY IMPORTED_LOCATION "${HPHP_HOME}/bin/libhphp_runtime.a")

add_library(timelib STATIC IMPORTED)
SET_PROPERTY(TARGET timelib PROPERTY IMPORTED_LOCATION "${HPHP_HOME}/bin/libtimelib.a")

add_library(sqlite3 STATIC IMPORTED)
SET_PROPERTY(TARGET sqlite3 PROPERTY IMPORTED_LOCATION "${HPHP_HOME}/bin/libsqlite3.a")

if (NOT SKIP_BUNDLED_XHP)
	add_library(xhp STATIC IMPORTED)
	SET_PROPERTY(TARGET xhp PROPERTY IMPORTED_LOCATION "${HPHP_HOME}/bin/libxhp.a")
endif()

add_library(afdt STATIC IMPORTED)
SET_PROPERTY(TARGET afdt PROPERTY IMPORTED_LOCATION "${HPHP_HOME}/bin/libafdt.a")

add_library(mbfl STATIC IMPORTED)
SET_PROPERTY(TARGET mbfl PROPERTY IMPORTED_LOCATION "${HPHP_HOME}/bin/libmbfl.a")

target_link_libraries(${PROGRAM_NAME} libhphp_runtime)

hphp_link(${PROGRAM_NAME})
